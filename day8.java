import java.util.*;
import java.util.List;
import java.util.stream.*;
import java.awt.*;

class Day8 {
	
	public static void main(String[] args) {
		System.out.println("Sample phase one result, expected: 14, actual: " + countUniqueAntiNodes(parse(sample), false));
		System.out.println("Actual phase one result, expected: 273, actual: " + countUniqueAntiNodes(parse(input), false));
		System.out.println("Sample phase two result, expected: 34, actual: " + countUniqueAntiNodes(parse(sample), true));
		System.out.println("Actual phase two result, expected: 1017, actual: " + countUniqueAntiNodes(parse(input), true));
	}
	
	public static int countUniqueAntiNodes(Map<Character, AntennaGrid> input, boolean should_propagate) {
		Set<Point> antiNodesUnique = new HashSet<Point>();
		
		for (Map.Entry<Character, AntennaGrid> entry : input.entrySet()) {
			AntennaGrid grid = entry.getValue();
			antiNodesUnique.addAll(grid.getAntiNodeCoordinates(should_propagate));
			
			if (should_propagate) { //antennas are anti-nodes when propagating
				antiNodesUnique.addAll(grid.coordinates);
			}
		}

		return antiNodesUnique.size();
	}
	
	public static Map<Character, AntennaGrid> parse(String input) {
		Map<Character, AntennaGrid> antennaMap = new HashMap<>();
		
		String[] lines = input.split("\n");
		var height = lines.length;
		var width = lines[0].length();
		for (int y = 0; y < lines.length; y++) {
			char[] row = lines[y].toCharArray();
			for (int x = 0; x < row.length; x++) {
				char cell = row[x];
				if (cell != '.') {
					antennaMap.computeIfAbsent(cell, k -> new AntennaGrid(height, width)).addCoordinate(x, y);
				}
			}
		}
		
		return antennaMap;
	}
	
	public static class AntennaGrid {
			public final Set<Point> coordinates = new HashSet<>();
			private int height, width;
			
			public AntennaGrid(int height, int width) {
				this.height = height;
				this.width = width;
			}
		
			public void addCoordinate(int x, int y) {
				coordinates.add(new Point(x, y));
			}
		
			public Set<Point> getAntiNodeCoordinates(boolean should_propagate) {
				
				int propagate_count = should_propagate 
					?Math.max(height,width)  // propagate to the limits of the grid
					:1;
				
				return coordinates.stream()
					.flatMap(element1 -> coordinates.stream().map(element2 -> List.of(element1, element2)))
					.filter(pair -> !pair.get(0).equals(pair.get(1))) // Only distinct pairs
					.flatMap(pair -> IntStream.rangeClosed(1, propagate_count)
						.mapToObj(count -> new Point(
							pair.get(0).x - (pair.get(1).x - pair.get(0).x) * count,
							pair.get(0).y - (pair.get(1).y - pair.get(0).y) * count
						))
						.filter(this::inGrid) // Only include points in the grid
					)
					.collect(Collectors.toSet());
				
			}
		
			private boolean inGrid(Point p) {
				return (p.x >= 0 && p.x < width && p.y >= 0 && p.y < height);
			}
		
		}
	
	static String sample =	"""
							............
							........0...
							.....0......
							.......0....
							....0.......
							......A.....
							............
							............
							........A...
							.........A..
							............
							............
							""";
	
	static String input =	"""
							..................................3.........H.....
							..............F............................CK.....
							..................F...e...m..........C.Ki.........
							......1..................m........................
							.........F.1......................................
							.......1.....W...........3..Z............i........
							...........W...m....1.............................
							......W...........m..............N..C.............
							E............2................Z.K.......p.........
							.....Y.........4....i.........N...................
							..............W.Y....................3..9....i....
							.................................h........9.......
							.........................................Z.......H
							2...............................3.......H9........
							..2..........4T...................................
							...2..............Y...4........Z..................
							.........E.........................N...5..........
							.......................................e..........
							..............................C...................
							..E..................P.....................p.H....
							......4............................IN......h.p....
							..........................T....M.........K..p.....
							..........................G.......................
							..................................................
							...................................M..............
							.5.............G..............M...................
							.............Y..........................M.........
							.................E8...0.........................h.
							.............................P............g.......
							......5...........................................
							.............n.................................c..
							...............................g....f.......c.....
							.y..............8...t....T........................
							..7..F.............T........R..........f........u.
							.kz.......7..R....................................
							.........8..................U.........P...........
							......U.............wG....v.....P.............c...
							...0.....R..........g.............................
							.....7.....8.........g.............f..............
							....z...........G................7................
							........5........6.v.....U..f.......u........e....
							.........V....v........6......t...................
							......6..0..y.....R........V...........r..........
							...........v.......we..U.............c..r.........
							................................r.......Iu........
							k............y6..........t.................r...I..
							........k............t...........w................
							.............z....n.................I.............
							..0.................n.............................
							...............n..........V...........y........u..
							""";
	
}

	